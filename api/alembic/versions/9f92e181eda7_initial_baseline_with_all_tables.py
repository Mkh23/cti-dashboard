"""Initial baseline with all tables

Revision ID: 9f92e181eda7
Revises: 
Create Date: 2025-10-01 20:50:56.002501

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2

# revision identifiers, used by Alembic.
revision: str = '9f92e181eda7'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Enable PostGIS extension
    op.execute('CREATE EXTENSION IF NOT EXISTS postgis')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('assets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('bucket', sa.Text(), nullable=False),
    sa.Column('object_key', sa.Text(), nullable=False),
    sa.Column('sha256', sa.String(length=64), nullable=False),
    sa.Column('size_bytes', sa.BigInteger(), nullable=True),
    sa.Column('mime_type', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('bucket', 'object_key', name='uq_asset_bucket_key')
    )
    op.create_table('farms',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('geofence', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, dimension=2, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('centroid', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_farms_geofence_gist', 'farms', ['geofence'], unique=False, postgresql_using='gist')
    op.create_table('ingestion_log',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('capture_id', sa.Text(), nullable=False),
    sa.Column('ingest_key', sa.Text(), nullable=False),
    sa.Column('http_status', sa.Integer(), nullable=True),
    sa.Column('bytes_in', sa.Integer(), nullable=True),
    sa.Column('ms', sa.Integer(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ingest_log_key_time', 'ingestion_log', ['ingest_key', 'created_at'], unique=False)
    op.create_index(op.f('ix_ingestion_log_capture_id'), 'ingestion_log', ['capture_id'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.Text(), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('animals',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('farm_id', sa.UUID(), nullable=True),
    sa.Column('tag_id', sa.Text(), nullable=False),
    sa.Column('breed', sa.Text(), nullable=True),
    sa.Column('sex', sa.Text(), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('farm_id', 'tag_id', name='uq_farm_animal_tag')
    )
    op.create_table('devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('device_code', sa.Text(), nullable=False),
    sa.Column('label', sa.Text(), nullable=True),
    sa.Column('farm_id', sa.UUID(), nullable=True),
    sa.Column('s3_prefix_hint', sa.Text(), nullable=True),
    sa.Column('last_seen_at', sa.DateTime(), nullable=True),
    sa.Column('last_upload_at', sa.DateTime(), nullable=True),
    sa.Column('captures_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_devices_device_code'), 'devices', ['device_code'], unique=True)
    op.create_table('notifications',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notifications_user_time', 'notifications', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('scans',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scan_id', sa.Text(), nullable=True),
    sa.Column('capture_id', sa.Text(), nullable=False),
    sa.Column('ingest_key', sa.Text(), nullable=False),
    sa.Column('device_id', sa.UUID(), nullable=False),
    sa.Column('farm_id', sa.UUID(), nullable=True),
    sa.Column('animal_id', sa.UUID(), nullable=True),
    sa.Column('operator_id', sa.UUID(), nullable=True),
    sa.Column('gps', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('captured_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('uploaded', 'ingested', 'graded', 'error', name='scanstatus'), nullable=False),
    sa.Column('image_asset_id', sa.UUID(), nullable=True),
    sa.Column('mask_asset_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.ForeignKeyConstraint(['image_asset_id'], ['assets.id'], ),
    sa.ForeignKeyConstraint(['mask_asset_id'], ['assets.id'], ),
    sa.ForeignKeyConstraint(['operator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_scans_device_captured', 'scans', ['device_id', 'captured_at'], unique=False)
    op.create_index('idx_scans_farm_captured', 'scans', ['farm_id', 'captured_at'], unique=False)
    op.create_index('idx_scans_status_created', 'scans', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_scans_capture_id'), 'scans', ['capture_id'], unique=False)
    op.create_index(op.f('ix_scans_ingest_key'), 'scans', ['ingest_key'], unique=True)
    op.create_table('grading_results',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scan_id', sa.UUID(), nullable=False),
    sa.Column('model_name', sa.Text(), nullable=False),
    sa.Column('model_version', sa.Text(), nullable=False),
    sa.Column('inference_sha256', sa.String(length=64), nullable=True),
    sa.Column('confidence', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('confidence_breakdown', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('features_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_grading_model_ver', 'grading_results', ['model_name', 'model_version'], unique=False)
    op.create_index('idx_grading_scan_time', 'grading_results', ['scan_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_grading_results_scan_id'), 'grading_results', ['scan_id'], unique=False)
    op.create_table('scan_events',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('scan_id', sa.UUID(), nullable=False),
    sa.Column('event', sa.Text(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['scan_id'], ['scans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_scan_events_scan_time', 'scan_events', ['scan_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_scan_events_scan_id'), 'scan_events', ['scan_id'], unique=False)
    # ### end Alembic commands ###
    
    # Seed default roles
    op.execute("""
        INSERT INTO roles (id, name) VALUES 
            (1, 'admin'),
            (2, 'technician'),
            (3, 'farmer')
        ON CONFLICT DO NOTHING
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_scan_events_scan_id'), table_name='scan_events')
    op.drop_index('idx_scan_events_scan_time', table_name='scan_events')
    op.drop_table('scan_events')
    op.drop_index(op.f('ix_grading_results_scan_id'), table_name='grading_results')
    op.drop_index('idx_grading_scan_time', table_name='grading_results')
    op.drop_index('idx_grading_model_ver', table_name='grading_results')
    op.drop_table('grading_results')
    op.drop_index(op.f('ix_scans_ingest_key'), table_name='scans')
    op.drop_index(op.f('ix_scans_capture_id'), table_name='scans')
    op.drop_index('idx_scans_status_created', table_name='scans')
    op.drop_index('idx_scans_farm_captured', table_name='scans')
    op.drop_index('idx_scans_device_captured', table_name='scans')
    op.drop_table('scans')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index('idx_notifications_user_time', table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_devices_device_code'), table_name='devices')
    op.drop_table('devices')
    op.drop_table('animals')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_ingestion_log_capture_id'), table_name='ingestion_log')
    op.drop_index('idx_ingest_log_key_time', table_name='ingestion_log')
    op.drop_table('ingestion_log')
    op.drop_index('idx_farms_geofence_gist', table_name='farms', postgresql_using='gist')
    op.drop_table('farms')
    op.drop_table('assets')
    # ### end Alembic commands ###
